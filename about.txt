Okay, so this is a project started 2 days after being
released as a full time missionary of the Church of Jesus
Christ of Latter-Day Saints.

Game created by Timothy Bennett
Started at 			2019/04/18 22:00
Alpha reached at 	20










--About the Game--
Most games are skill-based. This is a game that is so,
however there is a twist: not only is the player tested
in this way, they are also tested in the scheme of a
couple of Christlike attributes. Namely: obedience (there
will be ppl in the game who tell the player to not do
something)










--Controls--
For this game, in order to play on keyboard (the standard
way that at least I'LL play this thing), because it's a
platformer, we will use:
-wasd for movement				// Will be a joystick in the virtual controller
-j for run or action			// Will be "Button1"
-k for action (prob. jump)		// Will be "Button2"











--Level Editor--
Make a png, and if it's special, start the file name w/
"s_%%%%_" w/ %%%% being a number indicating which special it is,
but other than that, you can put anything you want!*
(NOTE: THE LAST SECTION OF THE FILENAME SHOULD BE THE 'n_' section)

If there's a door (which there will definitely be one),
you can add (at the beginning) "e_%%%%_" w/ %%%% representing
the name of the level. You can add as many exits you want, just
keep in mind the order is found in the pixels as well! (1 px for
the exit). 



*This is the naming scheme:

EXAMPLE: s_2_e_jojos_e_unity_n_hawsoo.png

So here we have:
-a SPECIAL #2 (the level is modified by the internal
code there, eh),
-2 exits, the first one being to the level "jojos",
and the second leading to the level "unity"
-and finally, the name of the level is a one-word
"hawsoo"... the level name would have to be one-word
I'd imagine


LEVEL EDITOR KEY
-Note: I tried making a factory, but if you want to add a new object,
make sure to register it, hard-coded in ObjectFactory.cpp

r,g,b
255,216,0 (Yellow = player start position if respawning (has only 1))
0,0,0 (Black = ground)
38,127,0 (Drk Green = exit)

160,160,160 (Gray = slant (may be hard to implement, since there needs
to be some neighbor calculations!!!))

255,255,255 (White = nothing)






--Tech--
This program uses SDL2, OpenGL, (will use) GLEW, and dirent.h


Okay, so about Quad.h/.cpp, this is for drawing images only! If
you want a bounding box, use Object.h's "BoundBox" struct right there!
