Okay, so this is a project started 2 days after being
released as a full time missionary of the Church of Jesus
Christ of Latter-Day Saints.

Game created by Timothy Bennett
Started at 			2019/04/18 22:00
Alpha reached at 	20










--About the Game--
Most games are skill-based. This is a game that is so,
however there is a twist: not only is the player tested
in this way, they are also tested in the scheme of a
couple of Christlike attributes. Namely: obedience (there
will be ppl in the game who tell the player to not do
something)










--Controls--
For this game, in order to play on keyboard (the standard
way that at least I'LL play this thing), because it's a
platformer, we will use:
-wasd for movement				// Will be a joystick in the virtual controller
-j for run or action			// Will be "Button1"
-k for action (prob. jump)		// Will be "Button2"











--Level Editor--
Make a png, and if it's special, start the file name w/
"s_%%%%_" w/ %%%% being a number indicating which special it is,
but other than that, you can put anything you want!*
(NOTE: THE LAST SECTION OF THE FILENAME SHOULD BE THE 'n_' section)

If there's a door (which there will definitely be one),
you can add (at the beginning) "e_%%%%_" w/ %%%% representing
the name of the level. You can add as many exits you want, just
keep in mind the order is found in the pixels as well! (1 px for
the exit). 



*This is the naming scheme:

EXAMPLE: n_hawsoo.s_2_e_jojos_e_unity.png

So here we have:
-a SPECIAL #2 (the level is modified by the internal
code there, eh),
-2 exits, the first one being to the level "jojos",
and the second leading to the level "unity"
-and finally, the name of the level is a one-word
"hawsoo"... the level name would have to be one-word
I'd imagine

NOTE: EDIT (2019/6/10) the first thing here is the name of the level
(and ends in a period), and following it are the parameters.





LEVEL EDITOR KEY
-Note: I tried making a factory, but if you want to add a new object,
make sure to register it, hard-coded in ObjectFactory.cpp

r,g,b
255,216,0 (Yellow = player start position if respawning (has only 1))
0,0,0 (Black = ground)
38,127,0 (Drk Green = exit)

0,162,232 (Blue = slant (right) (may be hard to implement, since there needs
	to be some neighbor calculations!!!))
153,217,234 (Light Blue = slant (left))
LEFT means the slope is negative
RIGHT means it's positive!!!



255,0,0 Hazard
100,100,100 TopSideCollGround

255,255,255 (White = nothing)






--Tech--
This program uses SDL2, OpenGL, (will use) GLEW, and dirent.h


Okay, so about Quad.h/.cpp, this is for drawing images only! If
you want a bounding box, use Object.h's "BoundBox" struct right there!








--Cutscenes--
So cutscenes are editable too. It's just a tab-delimited file where you add sprites,
(bc they each have an id) assign them to objects and then give the objects functions
to call at a certain time stamp. There will be an ending time stamp as well (these are
tracked in 'ticks', or basically just how many frames based on a 60fps system)

Bc this is possible, (and now triggers can call these cutscenes by 't_c_[name]') it'd be
really easy to create simple 2D cutscenes for the game!

-How to do 2D animation?


[EXAMPLE]
s	20,30	images/jojo.png
	40,40	images/jojo2.png
	p1,0

This creates a sprite (the 's'), and w/ a tab, defines the first image. It can stop here,
for a static image. However, in this example it doesn't, so the enter is pressed, the next line
is read (bc. the next line starts w/ '\t', not a different char 's' or an 'o' or somewhat).
It shows another image! A 2 slot array holding both images is made. Then when the images are done,
the parameters are shown, which is a 1, then a 0.

If there's more than 1 image defined here, then the last 2 digit props are expected.




-How to create an object?


[EXAMPLE]
o	0	0,0
	0	20	move	0,4

This is similar for the 's', where first you start w/ an 'o' and then tab, define the sprite id
(first one has 0 id, yeah), then tab, and the starting coordinates (these aren't grid coords, but
likely they'll be scaled up when there's a higher and higher resolution). After that, you can define
any command by first pressing enter, tab, then putting the start frame, tab, end tick of the action,
tab, name of the action, and tab tab tab for any arguments for this function.

If an object won't have a sprite, you put -1 for it.

0,0 is the very center of the screen, by the way.



-Bagckground music?

[EXAMPLE]
o	-1	0,0
	0	2000	music	songs/jojos.ogg	1				// [0, 2000) ticks, repeat (1) the song 'jojos.ogg'
	2000	2001	end									// [2000, 2001) ticks, end the cutscene.

This could be a cutscene controller. It defines the music played, and then the end of the cutscene.
Has a very important job, and could centralize things that are global effects, like fade in-out or
such.



Just like levels, cutscenes will have a unique code in the filename. You can exit into another cutscene
(scene switch), or exit into a level. Yay!!! So you can do anything you want!!!

And then, it's just up to YOU if you'll make it!




-Cutscene objects
They will have all the functions available to them, and they only need x and y coordinates to
render the images anyways. So extremely simple.






















--For Cross-platform support--

Copy and paste this:

#if defined(__unix__) || defined(__APPLE__)
#elif defined(_WIN32) || defined(WIN32)
#endif




--BUGS--
x-You can jump on HAZARDS if you hold a.

--TODO--
-Change the coding so that for 'exits' they are now called 'triggers' and that they
will operate on the 't_' flag in the level's code.
-Make better neighbor calculations for the big 'triggers' object, so that they can join
together when adjacent from each other.






--PLANNING--

-npcs
	-You'd have to be able to enter them in, but for now, they need to be able to
		-have their x and y coords be manipulatible
		-as well as hsp and vsp values
		-NO COLLISION IS NECESSARY
		-have support for textboxes
		-can change their sprite and animate
	-This should be coded just like the cutscene.h, that way it'll be really easy.
		-And this can all be in the 'NPC' class, I suppose,
			-And when it's done acting out, we can just have it have code to change
			 into an enemy or whatever.
			-And if desired, keep the NPC object and say 'onAllObjectsDeleted()', if
			 it spat out an enemy, and then have the NPC encaser reappear and do some cut
			 scene before actually disappearing eh!

-But for now, it will just be a hard-coded not fancy at all example eh.




--LEVEL TILESETS--

So for this, it's a map showing all the spots (will correspond w/ the actual level, but
doesn't have to have the same dimensions, but the x and y coords will be the exact same eh)
where tiles are to be placed.

STYLE: will be anything, but basically the tileset will be a (for the case of 32px tiles)
512x512 png for 256 different tiles. The splitting will be automatic into 16x16 grids, so
if you want to use a 1024x1024 tile-set, then all of a sudden you have hd textures!

As to which tile will be used, in the picture, if the red value is 0, it will just ignore
it (blank tile), but the game will just simply read the red value (g and b aren't looked
at eh) and then find the coordinates for that inside of an array, and that will be the
assigned tile value! (excluding the blank 0 tile), you have 1-255 different choices!!!!


For the standard cardinal blocks, you will need 8 for sides and corners, and a 9th for a
center, (probably black) block.

For slants, you will need 4 for the 45 degrees, 8 for the 4-block wides, 6 for the 3's,
and 4 for the 2's.

CURRENT TOTAL: 31 tiles for just the ground

(NOTE: and of course you can animate the tilesets, precisely like you do it w/ cutscenes)

